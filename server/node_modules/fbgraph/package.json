{
  "name": "fbgraph",
  "version": "0.2.6",
  "description": "Facebook Graph API client",
  "keywords": [
    "facebook",
    "api",
    "graph"
  ],
  "author": {
    "name": "Cristiano Oliveira",
    "email": "ocean.cris@gmail.com"
  },
  "main": "index",
  "dependencies": {
    "request": "2.11.x",
    "qs": "0.5.x"
  },
  "devDependencies": {
    "vows": "0.6.x"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/criso/fbgraph.git"
  },
  "engines": {
    "node": ">= 0.4.1"
  },
  "readme": "# Stay Classy, Facebook\r\n\r\n[FBgraph](http://criso.github.com/fbgraph/) is a nodejs module that provides easy access to the facebook graph api\r\n\r\n\r\n## Oh nooooooesss - MOAR facebook\r\n\r\n  I created this because I wanted to access FB's graph from `node`.  \r\n  The libraries I found, felt clunky to me, and I needed an excuse to create a node module.  \r\n\r\n  All calls will return `json`. Facebook sometimes (on friend requests, deleting test users, access token request)   \r\n  decides to just return a `string` or `true` or redirects directly to the image. I say __nay-nay__! Let's make it Disney, and keep things consistent! \r\n\r\n\r\n## Installation via npm\r\n    $ npm install fbgraph\r\n\r\n    var graph = require('fbgraph');\r\n\r\n## Authentication\r\n\r\nIf you get an accesstoken via some other Oauth module like [everyauth](https://github.com/bnoguchi/everyauth) , \r\n[connect-auth](https://github.com/ciaranj/connect-auth) or [node-oauth](https://github.com/ciaranj/node-oauth) you can just set  \r\nthe access token directly. Most `get` calls, and pretty much all `post` calls will require an `access_token`\r\n\r\n```js\r\n    graph.setAccessToken(access_token);\r\n```\r\n\r\nThis is how you would get authenticated using only the `fbgraph` module.\r\nMore details below on the __express app__ section\r\n\r\n```js\r\n    // get authorization url\r\n    var authUrl = graph.getOauthUrl({\r\n        \"client_id\":     conf.client_id\r\n      , \"redirect_uri\":  conf.redirect_uri\r\n    });\r\n\r\n    // shows dialog\r\n    res.redirect(authUrl);\r\n\r\n    // after user click, auth `code` will be set\r\n    // we'll send that and get the access token\r\n    graph.authorize({\r\n        \"client_id\":      conf.client_id\r\n      , \"redirect_uri\":   conf.redirect_uri\r\n      , \"client_secret\":  conf.client_secret\r\n      , \"code\":           req.query.code\r\n    }, function (err, facebookRes) {\r\n      res.redirect('/loggedIn');\r\n    });\r\n```\r\n\r\n## How requests are made\r\nAll calls are made using the [request](https://github.com/mikeal/request)  nodejs module  \r\n__Why?__ something to do with wheels and re-invention.  \r\n\r\nRequest options are directly mapped and can be set like so:\r\n\r\n```js\r\nvar options = {\r\n    timeout:  3000\r\n  , pool:     { maxSockets:  Infinity }\r\n  , headers:  { connection:  \"keep-alive\" }\r\n};\r\n\r\ngraph\r\n  .setOptions(options)\r\n  .get(\"zuck\", function(err, res) {\r\n    console.log(res); // { id: '4', name: 'Mark Zuckerberg'... }\r\n  });\r\n```\r\n\r\nPossible options can be found on the [request github page](https://github.com/mikeal/request)  \r\n\r\n`followRedirect` cannot be overriden and has a default value of `false`  \r\n`encoding` will have `utf-8` as default if nothing is set  \r\n\r\n## Read data from the Graph Api\r\n\r\n```js\r\ngraph.get(\"zuck\", function(err, res) {\r\n  console.log(res); // { id: '4', name: 'Mark Zuckerberg'... }\r\n});\r\n```\r\n\r\nparams in the `url`\r\n\r\n```js\r\ngraph.get(\"zuck?fields=picture\", function(err, res) {\r\n  console.log(res); // { picture: 'http://profile.ak.fbcdn.net/'... }\r\n});\r\n```\r\n\r\nparams as an `object`\r\n\r\n```js\r\nvar params = { fields: \"picture\" };\r\n\r\ngraph.get(\"zuck\", params,  function(err, res) {\r\n  console.log(res); // { picture: \"http://profile.ak.fbcdn.net/...\" }\r\n});\r\n```\r\n\r\nGraphApi calls that __redirect__ directly to an image\r\nwill return a `json` response with relevant fields\r\n\r\n```js\r\ngraph.get(\"/zuck/picture\", function(err, res) {\r\n  console.log(res); // { image: true, location: \"http://profile.ak.fb...\" }\r\n});\r\n```\r\n\r\n## Search data from the Graph Api\r\n\r\nSearch for public posts that contain __brogramming__\r\n\r\n```js\r\nvar searchOptions = {\r\n    q:     \"brogramming\"\r\n  , type:  \"post\"\r\n};\r\n\r\ngraph.search(searchOptions, function(err, res) {\r\n  console.log(res); // {data: [{id: xxx, from: ...}, {id: xxx, from: ...}]}\r\n});\r\n```\r\n\r\n## Publish data to the Graph Api\r\nAll publish requests will require an `access token`\r\n\r\nonly needs to be set once\r\n\r\n```js\r\ngraph.setAccessToken(accessToken);\r\n```\r\n\r\nPost a message on a `friend's` wall\r\n\r\n```js\r\nvar wallPost = {\r\n  message: \"I'm gonna come at you like a spider monkey, chip!\"\r\n};\r\n\r\ngraph.post(userId + \"/feed\", wallPost, function(err, res) {\r\n  // returns the post id\r\n  console.log(res); // { id: xxxxx}\r\n});\r\n```\r\n\r\n## Delete a Graph object\r\n\r\nTo delete a graph object, provide an `object id` and the \r\nresponse will return `{data: true}` or `{data:false}`\r\n\r\n```js\r\ngraph.del(postID, function(err, res) {\r\n  console.log(res); // {data:true}/{data:false}\r\n});\r\n```\r\n\r\n## Performing a FQL query\r\n\r\nA single FQL query is done by sending a query as a string\r\n\r\n```js\r\nvar query = \"SELECT name FROM user WHERE uid = me()\";\r\n\r\ngraph.fql(query, function(err, res) {\r\n  console.log(res); // { data: [ { name: 'Ricky Bobby' } ] }\r\n});\r\n```\r\n\r\n## Performing a FQL Multi-Query\r\n\r\nFQL Multi-Queries are done by sending in an object containing the separate queries\r\n\r\n```js\r\nvar query = {\r\n    name:         \"SELECT name FROM user WHERE uid = me()\"\r\n  , permissions:  \"SELECT email, user_about_me, user_birthday FROM permissions WHERE uid = me()\"\r\n};\r\n\r\ngraph.fql(query, function(err, res) {\r\n  console.log(res);\r\n  // { data: [\r\n  //   { name: 'name', fql_result_set: [{name: 'Ricky Bobby'}] },\r\n  //   { name: 'permissions', fql_result_set: [{email: 1, user_about_me: 1...}] }\r\n  // ]}\r\n});\r\n```\r\n\r\n## Rockin' it on an Express App\r\n\r\nThis example assumes that you have a link on the main page `/` that points to `/auth/facebook`.   \r\nThe user will click this link and get into the facebook authorization flow ( if the user hasn't already connected)  \r\nAfter `authorizing` the app the user will be redirected to `/UserHasLoggedIn`  \r\n\r\n```js\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar express   = require('express')\r\n  , graph     = require('fbgraph')\r\n  , app       = module.exports = express.createServer();\r\n\r\n// this should really be in a config file!\r\nvar conf = {\r\n    client_id:      'YOUR FACEBOOK APP ID'\r\n  , client_secret:  'YOU FACEBOOK APP SECRET'\r\n  , scope:          'email, user_about_me, user_birthday, user_location, publish_stream'\r\n  , redirect_uri:   'http://localhost:3000/auth/facebook'\r\n};\r\n\r\n// Configuration\r\n\r\napp.configure(function(){\r\n  app.set('views', __dirname + '/views');\r\n  app.set('view engine', 'jade');\r\n  app.use(express.bodyParser());\r\n  app.use(express.methodOverride());\r\n  app.use(app.router);\r\n  app.use(express.static(__dirname + '/public'));\r\n});\r\n\r\napp.configure('development', function(){\r\n  app.use(express.errorHandler({ dumpExceptions: true, showStack: true })); \r\n});\r\n\r\napp.configure('production', function(){\r\n  app.use(express.errorHandler());\r\n});\r\n\r\n// Routes\r\n\r\napp.get('/', function(req, res){\r\n  res.render(\"index\", { title: \"click link to connect\" });\r\n});\r\n\r\napp.get('/auth/facebook', function(req, res) {\r\n\r\n  // we don't have a code yet\r\n  // so we'll redirect to the oauth dialog\r\n  if (!req.query.code) {\r\n    var authUrl = graph.getOauthUrl({\r\n        \"client_id\":     conf.client_id\r\n      , \"redirect_uri\":  conf.redirect_uri\r\n      , \"scope\":         conf.scope\r\n    });\r\n\r\n    if (!req.query.error) { //checks whether a user denied the app facebook login/permissions\r\n      res.redirect(authUrl);\r\n    } else {  //req.query.error == 'access_denied'\r\n      res.send('access denied');\r\n    }\r\n    return;\r\n  }\r\n\r\n  // code is set\r\n  // we'll send that and get the access token\r\n  graph.authorize({\r\n      \"client_id\":      conf.client_id\r\n    , \"redirect_uri\":   conf.redirect_uri\r\n    , \"client_secret\":  conf.client_secret\r\n    , \"code\":           req.query.code\r\n  }, function (err, facebookRes) {\r\n    res.redirect('/UserHasLoggedIn');\r\n  });\r\n\r\n\r\n});\r\n\r\n\r\n// user gets sent here after being authorized\r\napp.get('/UserHasLoggedIn', function(req, res) {\r\n  res.render(\"index\", { title: \"Logged In\" });\r\n});\r\n\r\n\r\nvar port = process.env.PORT || 3000;\r\napp.listen(port, function() {\r\n  console.log(\"Express server listening on port %d\", port);\r\n});\r\n\r\n```\r\n\r\n## Running tests\r\n\r\n Before running the test suite, add your Facebook `appId` and `appSecret` to `tests/config.js`   \r\n This is needed to create `test users` and to get a test `access_token`\r\n\r\n    $ npm install\r\n    $ make test\r\n\r\n _Tests might fail if the Facebook api has an issue._\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2011 Cristiano Oliveira &lt;ocean.cris@gmail.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n",
  "readmeFilename": "README.md",
  "_id": "fbgraph@0.2.6",
  "_from": "fbgraph@"
}
